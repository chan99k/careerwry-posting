import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'

    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.23' // 엔티티에 기본 생성자가 필요한 부분 해결
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.23' // 자동문 장착
    id "org.jetbrains.kotlin.kapt" version '1.9.23'    // QueryDSL
    id "org.jetbrains.kotlin.plugin.allopen" version '1.9.23' // 프록시를 활용하기 위해 allopen
//    id "org.jlleitschuh.gradle.ktlint" version "11.4.0"
}

ext {
    springCloudVersion = "2023.0.3"
}

group = 'kr.co'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("jakarta.servlet:jakarta.servlet-api:5.0.0")
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    testImplementation 'io.projectreactor:reactor-test'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // QueryDSL
    implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
    kapt("com.querydsl:querydsl-apt:5.0.0:jakarta")
    kapt("org.springframework.boot:spring-boot-configuration-processor")

    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'io.github.oshai:kotlin-logging-jvm:5.1.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Auth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'io.kotest:kotest-runner-junit5:5.6.2'
    testImplementation 'io.kotest:kotest-assertions-core:5.6.2'
    testImplementation 'io.kotest.extensions:kotest-extensions-spring:1.1.3'
    testImplementation 'io.kotest.extensions:kotest-extensions-testcontainers:2.0.2'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}

bootBuildImage {
    builder = "paketobuildpacks/builder:tiny"
    imageName = "${project.name}"
    environment = ["BP_JVM_VERSION": "17"]

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}


allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}